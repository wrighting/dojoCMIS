<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.wrighting</groupId>
	<artifactId>dojoCMIS</artifactId>
	<name>dojoCMIS</name>
	<version>0.0.2</version>
	<packaging>jar</packaging>
	<description>Contains the dojoCMIS code together with dgrid for convenience</description>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<dependency.dgrid.version>1.1.0</dependency.dgrid.version>
		<dependency.dstore.version>1.1.1</dependency.dstore.version>
	</properties>

	<build>

		<!-- Everything gets place into the META-INF folder of the JAR because 
			Surf (the expected platform for Aikau) will be able to access resources from 
			that location via the /res/ path -->
		<resources>
			<!-- By default we're going to place the source files into a versioned 
				path... -->
			<resource>
				<targetPath>META-INF/js/${project.artifactId}/${project.version}/wrighting</targetPath>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/resources/wrighting</directory>
			</resource>

			<!-- Put the release notes in the root of the JAR file -->
			<resource>
				<targetPath>.</targetPath>
				<filtering>true</filtering>
				<includes>
					<include>ReleaseNotes.md</include>
				</includes>
				<directory>${basedir}</directory>
			</resource>

			<resource>
			    <!-- Path has to be aligned with version because Surf caches by XML path -->
			    <targetPath>./alfresco/site-data/extensions/${project.version}</targetPath>
			    <filtering>true</filtering>
			    <directory>${basedir}/src/main/resources/extension-module</directory>
			</resource>

                        <resource>
                                <targetPath>META-INF</targetPath>
                                <filtering>false</filtering>
                                <directory>${basedir}/src/main/resources/META-INF</directory>
                        </resource>

			<!-- ...but everything else goes into a standard path -->
			<resource>
				<targetPath>META-INF/js/lib</targetPath>
				<filtering>false</filtering>
				<directory>${basedir}/src/main/resources/lib</directory>
			</resource>

			<resource>
				<directory>${project.build.outputDirectory}/wrighting</directory>
				<targetPath>${project.build.testOutputDirectory}/testApp/WEB-INF/classes/wrighting</targetPath>
			</resource>

		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>testApp/WEB-INF/surf.xml</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>testApp/WEB-INF/surf.xml</exclude>
				</excludes>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.9</version>
				<executions>
					<execution>
						<id>unpack-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.webjars.bower</groupId>
									<artifactId>dgrid</artifactId>
									<version>${dependency.dgrid.version}</version>
									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/classes</outputDirectory>
									<excludes>**/META-INF/resources/webjars/dgrid/${dependency.dgrid.version}/test/**</excludes>
									<excludes>**/META-INF/resources/webjars/dgrid/${dependency.dgrid.version}/doc/**</excludes>
									<excludes>**/META-INF/resources/webjars/dgrid/${dependency.dgrid.version}/demos/**</excludes>
								</artifactItem>
								<artifactItem>
									<groupId>org.webjars.bower</groupId>
									<artifactId>dstore</artifactId>
									<version>${dependency.dstore.version}</version>
									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/classes</outputDirectory>
									<excludes>**/META-INF/resources/webjars/dstore/${dependency.dstore.version}/test/**</excludes>
									<excludes>**/META-INF/resources/webjars/dstore/${dependency.dstore.version}/doc/**</excludes>
									<excludes>**/META-INF/resources/webjars/dstore/${dependency.dstore.version}/demos/**</excludes>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Generate jsdoc using a Maven plugin (Command: mvn jsdoc3:jsdoc3) -->
			<plugin>
				<groupId>com.phasebash.jsdoc</groupId>
				<artifactId>jsdoc3-maven-plugin</artifactId>
				<version>1.1.0</version>
				<configuration>
					<recursive>true</recursive>
					<directoryRoots>
						<directoryRoot>${basedir}/src/main/resources/wrighting/</directoryRoot>
					</directoryRoots>
					<templateDirectory>${basedir}/src/jsdoc-templates/wrighting</templateDirectory>
					<configFile>${basedir}/conf.json</configFile>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<skipIfEmpty>true</skipIfEmpty>
					<excludes>
						<exclude>target/classes/**</exclude>
						<exclude>node_modules/**</exclude>
					</excludes>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}</Implementation-Version>
							<Build-Date>${maven.build.timestamp}</Build-Date>
						</manifestEntries>
						<manifestSections>
							<manifestSection>
								<name>dojoCMIS Libraries</name>
								<manifestEntries>
									<Dojo>${dependency.dojo.version}</Dojo>
								</manifestEntries>
							</manifestSection>
						</manifestSections>
					</archive>
				</configuration>
			</plugin>
			<!-- Compress JavaScript files and store as *-min.js -->

			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.5.1</version>
				<executions>
					<execution>
						<id>compress-js</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compress</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/node_modules/**</exclude>
								<exclude>**/js/**</exclude>
								<exclude>**/src/**</exclude>
								<exclude>**/Gruntfile.js</exclude>
								<exclude>**/webscripts/**</exclude>
								<exclude>**/site-webscripts/**</exclude>
								<exclude>**/*.lib.js</exclude>
								<exclude>**/*.css</exclude>
								<exclude>**/*-min.js</exclude>
								<exclude>**/*-min.css</exclude>
							</excludes>
							<warSourceDirectory>src/main/resources/META-INF</warSourceDirectory>
							<jswarn>false</jswarn>
						</configuration>
					</execution>
				</executions>
			</plugin>
<!-- 
mvn jgitflow:release-start
mvn jgitflow:release-finish
-->
            <plugin>
              <groupId>com.atlassian.maven.plugins</groupId>
              <artifactId>maven-jgitflow-plugin</artifactId>
              <version>1.0-alpha20</version>
              <configuration>
                <!-- Enable this to push to origin using SSH keys -->
                <enableSshAgent>true</enableSshAgent>
                <!-- Keep your maven submodules at the same version as the parent POM -->
                <autoVersionSubmodules>true</autoVersionSubmodules>
                <!--
                  Pusing in-development features to origin allows all devs to see what each other
                  are working on
                -->
                <pushFeatures>true</pushFeatures>
                <!--
                  This allows the CI server (e.g. Jenkins) to automatically push new releases to
                  origin; you can then either manually deploy them or, if you are doing Continuous
                  Deployments, auto-deploy them to prod
                -->
                <pushReleases>true</pushReleases>
                <!--
                  Hot Fixes should be pushed to origin as well so that any dev can pick them up
                -->
                <pushHotfixes>true</pushHotfixes>
                <!--
                  Prevents deployments from dev workstations so that they can be done by a CI
                  server
                -->
                <noDeploy>true</noDeploy>
                <flowInitContext>
                  <!--
                    You can customize your development branch name. Why? Because it's faster to type
                    'git push origin dvlp'
                    than
                    'git push origin develop'
                    ;-)
                  -->
                  <developBranchName>dvlp</developBranchName>
                </flowInitContext>
              </configuration>
            </plugin>

		</plugins>
	</build>

	<scm>
		<connection>scm:git:git@github.wrighting:wrighting/dojoCMIS.git</connection>
		<url>scm:git:git@github.wrighting:wrighting/dojoCMIS.git</url>
		<developerConnection>scm:git:git@github.wrighting:wrighting/dojoCMIS.git</developerConnection>
	  <tag>HEAD</tag>
	</scm>

</project>
